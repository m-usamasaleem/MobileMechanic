{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/uzair/Documents/Software-Engineering/MobileMechanic/components/screenSnippets/SignUpMechForm.js\";\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport firebase from \"./FirebaseInit\";\nvar yupValidationSchema = yup.object({\n  email: yup.string().email().required(\"You Must Provide an Email Address\"),\n  phone: yup.string().required(\"You Must Provide a Phone Number\").length(11),\n  pass: yup.string().required(\"You Must Choose a Password\").matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"All passwords must contain 8 characters with at least one uppercase letter, at least one lowercase letter, at least one digit and a special character\"),\n  confirm: yup.string().required(\"You Must Confirm Your Password\").oneOf([yup.ref(\"pass\"), null], \"Passwords Must Match\")\n});\n\nvar SignUpForm = function SignUpForm(props) {\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      phone: \"\",\n      pass: \"\",\n      confirm: \"\"\n    },\n    validationSchema: yupValidationSchema,\n    onSubmit: function onSubmit(formData, actions) {\n      console.log(\"Form Data:\", formData);\n      var userEmail = formData.email;\n      var userPhone = formData.phone;\n      var userPass = formData.pass;\n      userEmail = userEmail.replace(/\\./g, \",\");\n      console.log(userEmail);\n      firebase.database().ref(\"mobileMechanic/Clients/\" + userEmail).set({\n        phone: userPhone,\n        password: userPass\n      }).then(function () {\n        console.log(\"Customer Sign Up Successful\");\n        props.navigateTo(\"SignInMech\");\n      }).catch(function () {\n        console.log(\"Oho! Customer Sign Up Failed ...\");\n      });\n      actions.resetForm();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, function (formikProps) {\n    return React.createElement(View, {\n      style: myStyles.form,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      style: myStyles.inputField,\n      placeholder: \"Enter Your Phone\",\n      onChangeText: formikProps.handleChange(\"phone\"),\n      value: formikProps.values.phone,\n      keyboardType: \"numeric\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      style: myStyles.formError,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, \" \", formikProps.touched.phone && formikProps.errors.phone, \" \"), React.createElement(TextInput, {\n      style: myStyles.inputField,\n      placeholder: \"Enter Your Password\",\n      secureTextEntry: true,\n      onChangeText: formikProps.handleChange(\"pass\"),\n      value: formikProps.values.pass,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      style: myStyles.formError,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, \" \", formikProps.touched.pass && formikProps.errors.pass, \" \"), React.createElement(TextInput, {\n      style: {\n        textAlign: \"center\"\n      },\n      placeholder: \"Confirm Password\",\n      secureTextEntry: true,\n      onChangeText: formikProps.handleChange(\"confirm\"),\n      value: formikProps.values.confirm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      style: myStyles.formError,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, \" \", formikProps.touched.confirm && formikProps.errors.confirm, \" \"), React.createElement(TextInput, {\n      style: myStyles.inputField,\n      placeholder: \"Enter Your Email (Optional)\",\n      onChangeText: formikProps.handleChange(\"email\"),\n      value: formikProps.values.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }), React.createElement(TouchableOpacity, {\n      style: myStyles.loginScreenButton,\n      onPress: formikProps.handleSubmit,\n      underlayColor: \"#fff\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: myStyles.loginText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, \"Continue\")));\n  });\n};\n\nvar myStyles = StyleSheet.create({\n  form: {\n    textAlign: \"center\"\n  },\n  inputField: {\n    padding: 6,\n    textAlign: \"center\"\n  },\n  continueButton: {\n    backgroundColor: \"red\"\n  },\n  loginScreenButton: {\n    marginRight: 40,\n    marginLeft: 40,\n    marginTop: 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    backgroundColor: \"#35b8b6\",\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: \"#fff\",\n    position: \"relative\"\n  },\n  loginText: {\n    color: \"#fff\",\n    textAlign: \"center\",\n    paddingLeft: 10,\n    paddingRight: 10\n  },\n  button: {\n    backgroundColor: \"#00aeef\",\n    borderColor: \"red\",\n    borderWidth: 5,\n    borderRadius: 15\n  },\n  formError: {\n    color: \"red\",\n    fontSize: 12,\n    textAlign: \"center\"\n  }\n});\nexport default SignUpForm;","map":{"version":3,"sources":["/home/uzair/Documents/Software-Engineering/MobileMechanic/components/screenSnippets/SignUpMechForm.js"],"names":["React","Formik","yup","firebase","yupValidationSchema","object","email","string","required","phone","length","pass","matches","confirm","oneOf","ref","SignUpForm","props","formData","actions","console","log","userEmail","userPhone","userPass","replace","database","set","password","then","navigateTo","catch","resetForm","formikProps","myStyles","form","inputField","handleChange","values","formError","touched","errors","textAlign","loginScreenButton","handleSubmit","loginText","StyleSheet","create","padding","continueButton","backgroundColor","marginRight","marginLeft","marginTop","paddingTop","paddingBottom","borderRadius","borderWidth","borderColor","position","color","paddingLeft","paddingRight","button","fontSize"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  Button,\n  Alert,\n  TouchableOpacity,\n} from \"react-native\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport firebase from \"./FirebaseInit\";\n\nconst yupValidationSchema = yup.object({\n  email: yup.string().email().required(\"You Must Provide an Email Address\"),\n  phone: yup.string().required(\"You Must Provide a Phone Number\").length(11),\n  pass: yup\n    .string()\n    .required(\"You Must Choose a Password\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n      \"All passwords must contain 8 characters with at least one uppercase letter, at least one lowercase letter, at least one digit and a special character\"\n    ),\n  confirm: yup\n    .string()\n    .required(\"You Must Confirm Your Password\")\n    .oneOf([yup.ref(\"pass\"), null], \"Passwords Must Match\"),\n});\n\nconst SignUpForm = (props) => {\n  return (\n    <Formik\n      initialValues={{ email: \"\", phone: \"\", pass: \"\", confirm: \"\" }}\n      validationSchema={yupValidationSchema}\n      onSubmit={(formData, actions) => {\n        console.log(\"Form Data:\", formData);\n        let userEmail = formData.email;\n        let userPhone = formData.phone;\n        let userPass = formData.pass;\n        userEmail = userEmail.replace(/\\./g, \",\");\n        // Deliberating replacing \"dots\" in the email address with \"commas\"\n        // so to avoid firebase key indexing issues\n        console.log(userEmail);\n\n        firebase\n          .database()\n          .ref(`mobileMechanic/Clients/${userEmail}`)\n          .set({\n            phone: userPhone,\n            password: userPass,\n          })\n          .then(() => {\n            console.log(`Customer Sign Up Successful`);\n            props.navigateTo(\"SignInMech\");\n          })\n          .catch(() => {\n            console.log(`Oho! Customer Sign Up Failed ...`);\n          });\n\n        actions.resetForm();\n      }}\n    >\n      {(formikProps) => {\n        return (\n          <View style={myStyles.form}>\n            <TextInput\n              style={myStyles.inputField}\n              placeholder=\"Enter Your Phone\"\n              onChangeText={formikProps.handleChange(\"phone\")}\n              value={formikProps.values.phone}\n              keyboardType=\"numeric\"\n            />\n            <Text style={myStyles.formError}>\n              {\" \"}\n              {formikProps.touched.phone && formikProps.errors.phone}{\" \"}\n            </Text>\n\n            <TextInput\n              style={myStyles.inputField}\n              placeholder=\"Enter Your Password\"\n              secureTextEntry={true}\n              onChangeText={formikProps.handleChange(\"pass\")}\n              value={formikProps.values.pass}\n            />\n            <Text style={myStyles.formError}>\n              {\" \"}\n              {formikProps.touched.pass && formikProps.errors.pass}{\" \"}\n            </Text>\n\n            <TextInput\n              style={{ textAlign: \"center\" }}\n              placeholder=\"Confirm Password\"\n              secureTextEntry={true}\n              onChangeText={formikProps.handleChange(\"confirm\")}\n              value={formikProps.values.confirm}\n            />\n            <Text style={myStyles.formError}>\n              {\" \"}\n              {formikProps.touched.confirm && formikProps.errors.confirm}{\" \"}\n            </Text>\n            <TextInput\n              style={myStyles.inputField}\n              placeholder=\"Enter Your Email (Optional)\"\n              onChangeText={formikProps.handleChange(\"email\")}\n              value={formikProps.values.email}\n            />\n            <TouchableOpacity\n              style={myStyles.loginScreenButton}\n              onPress={formikProps.handleSubmit}\n              underlayColor=\"#fff\"\n            >\n              <Text style={myStyles.loginText}>Continue</Text>\n            </TouchableOpacity>\n          </View>\n        );\n      }}\n    </Formik>\n  );\n};\n\nconst myStyles = StyleSheet.create({\n  form: {\n    textAlign: \"center\",\n  },\n  inputField: {\n    padding: 6,\n    textAlign: \"center\",\n  },\n  continueButton: {\n    backgroundColor: \"red\",\n  },\n  loginScreenButton: {\n    marginRight: 40,\n    marginLeft: 40,\n    marginTop: 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    backgroundColor: \"#35b8b6\",\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: \"#fff\",\n    position: \"relative\",\n  },\n  loginText: {\n    color: \"#fff\",\n    textAlign: \"center\",\n    paddingLeft: 10,\n    paddingRight: 10,\n  },\n  button: {\n    backgroundColor: \"#00aeef\",\n    borderColor: \"red\",\n    borderWidth: 5,\n    borderRadius: 15,\n  },\n  formError: {\n    color: \"red\",\n    fontSize: 12,\n    textAlign: \"center\",\n  },\n});\n\nexport default SignUpForm;\n"]},"metadata":{},"sourceType":"module"}