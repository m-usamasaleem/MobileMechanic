{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/uzair/Documents/Software-Engineering/1-React-Native/SE-Project/MobileMechanic/components/screenSnippets/SignUpCustForm.js\";\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport firebase from \"./FirebaseInit\";\nvar yupValidationSchema = yup.object({\n  email: yup.string().email().required('You Must Provide an Email Address'),\n  phone: yup.string().required('You Must Provide a Phone Number').length(11),\n  pass: yup.string().required('You Must Choose a Password').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"All passwords must contain 8 characters with at least one uppercase letter, at least one lowercase letter, at least one digit and a special character\"),\n  confirm: yup.string().required('You Must Confirm Your Password').oneOf([yup.ref('pass'), null], 'Passwords Must Match')\n});\n\nvar SignUpForm = function SignUpForm(props) {\n  return React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      phone: '',\n      pass: '',\n      confirm: ''\n    },\n    validationSchema: yupValidationSchema,\n    onSubmit: function onSubmit(formData, actions) {\n      console.log('Form Data:', formData);\n      var userEmail = formData.email;\n      var userPhone = formData.phone;\n      var userPass = formData.pass;\n      userEmail = userEmail.replace(/\\./g, ',');\n      console.log(userEmail);\n      firebase.database().ref(\"mobileMechanic/Clients/\" + userEmail).set({\n        phone: userPhone,\n        password: userPass\n      }).then(function () {\n        console.log(\"Customer Sign Up Successful\");\n        props.navigateTo('SignInCust');\n      }).catch(function () {\n        console.log(\"Oho! Customer Sign Up Failed ...\");\n      });\n      actions.resetForm();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, function (formikProps) {\n    return React.createElement(View, {\n      style: myStyles.form,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }\n    }, React.createElement(TextInput, {\n      style: myStyles.inputField,\n      placeholder: \"Enter Your Email\",\n      onChangeText: formikProps.handleChange('email'),\n      value: formikProps.values.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 29\n      }\n    }), React.createElement(Text, {\n      style: myStyles.formError,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }\n    }, \" \", formikProps.touched.email && formikProps.errors.email, \" \"), React.createElement(TextInput, {\n      style: myStyles.inputField,\n      placeholder: \"Enter Your Phone\",\n      onChangeText: formikProps.handleChange('phone'),\n      value: formikProps.values.phone,\n      keyboardType: \"numeric\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 29\n      }\n    }), React.createElement(Text, {\n      style: myStyles.formError,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 29\n      }\n    }, \" \", formikProps.touched.phone && formikProps.errors.phone, \" \"), React.createElement(TextInput, {\n      style: myStyles.inputField,\n      placeholder: \"Enter Your Password\",\n      secureTextEntry: true,\n      onChangeText: formikProps.handleChange('pass'),\n      value: formikProps.values.pass,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 29\n      }\n    }), React.createElement(Text, {\n      style: myStyles.formError,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, \" \", formikProps.touched.pass && formikProps.errors.pass, \" \"), React.createElement(TextInput, {\n      style: {\n        textAlign: 'center'\n      },\n      placeholder: \"Confirm Password\",\n      secureTextEntry: true,\n      onChangeText: formikProps.handleChange('confirm'),\n      value: formikProps.values.confirm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }), React.createElement(Text, {\n      style: myStyles.formError,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 29\n      }\n    }, \" \", formikProps.touched.confirm && formikProps.errors.confirm, \" \"), React.createElement(Button, {\n      title: \"Continue\",\n      onPress: formikProps.handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }));\n  });\n};\n\nvar myStyles = StyleSheet.create({\n  form: {\n    textAlign: 'center'\n  },\n  inputField: {\n    textAlign: 'center'\n  },\n  formError: {\n    color: 'red',\n    fontSize: 12,\n    textAlign: 'center'\n  }\n});\nexport default SignUpForm;","map":{"version":3,"sources":["/home/uzair/Documents/Software-Engineering/1-React-Native/SE-Project/MobileMechanic/components/screenSnippets/SignUpCustForm.js"],"names":["React","Formik","yup","firebase","yupValidationSchema","object","email","string","required","phone","length","pass","matches","confirm","oneOf","ref","SignUpForm","props","formData","actions","console","log","userEmail","userPhone","userPass","replace","database","set","password","then","navigateTo","catch","resetForm","formikProps","myStyles","form","inputField","handleChange","values","formError","touched","errors","textAlign","handleSubmit","StyleSheet","create","color","fontSize"],"mappings":"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","sourcesContent":["import React from 'react' \nimport { View, Text, StyleSheet, TextInput, Button, Alert } from 'react-native' \nimport { Formik } from 'formik'\nimport * as yup from 'yup'\nimport firebase from './FirebaseInit'\n\nconst yupValidationSchema = yup.object({\n    email: yup.string().email().required('You Must Provide an Email Address'),\n    phone: yup.string().required('You Must Provide a Phone Number').length(11), \n    pass: yup.string().required('You Must Choose a Password').matches(\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n        \"All passwords must contain 8 characters with at least one uppercase letter, at least one lowercase letter, at least one digit and a special character\"\n      ),\n    confirm: yup.string().required('You Must Confirm Your Password').oneOf([yup.ref('pass'), null], 'Passwords Must Match'),\n});\n\nconst SignUpForm = (props) => {\n    return(\n        <Formik \n            initialValues = { {email: '', phone: '', pass: '', confirm: ''} }\n            validationSchema = { yupValidationSchema }\n            onSubmit = { (formData, actions) => {\n                console.log('Form Data:', formData);\n                let userEmail = formData.email;\n                let userPhone = formData.phone;\n                let userPass = formData.pass;\n                userEmail = userEmail.replace(/\\./g, ','); \n                // Deliberating replacing \"dots\" in the email address with \"commas\" \n                // so to avoid firebase key indexing issues\n                console.log(userEmail);\n                \n                firebase.database().ref(`mobileMechanic/Clients/${userEmail}`).set({\n                    phone: userPhone, \n                    password: userPass\n                }).then( () => { \n                    console.log(`Customer Sign Up Successful`);\n                    props.navigateTo('SignInCust')\n                })\n                .catch( () => { \n                    console.log(`Oho! Customer Sign Up Failed ...`);\n                });\n                \n                actions.resetForm();\n            }}> \n            {\n                (formikProps) => {\n                    return(\n                        <View style = { myStyles.form }> \n                            <TextInput \n                                style = { myStyles.inputField }\n                                placeholder = \"Enter Your Email\"\n                                onChangeText = {formikProps.handleChange('email')}\n                                value = { formikProps.values.email }\n                            />\n                            <Text style = { myStyles.formError }> { formikProps.touched.email && formikProps.errors.email } </Text>\n\n                            <TextInput \n                                style = { myStyles.inputField }\n                                placeholder = \"Enter Your Phone\"\n                                onChangeText = { formikProps.handleChange('phone') }\n                                value = { formikProps.values.phone }\n                                keyboardType = 'numeric'\n                            />\n                            <Text style = { myStyles.formError }> {  formikProps.touched.phone && formikProps.errors.phone } </Text>\n\n                            <TextInput \n                                style = { myStyles.inputField }\n                                placeholder = \"Enter Your Password\"\n                                secureTextEntry = {true}\n                                onChangeText = { formikProps.handleChange('pass') }\n                                value = { formikProps.values.pass }\n                            />\n                            <Text style = { myStyles.formError }> {  formikProps.touched.pass && formikProps.errors.pass } </Text>\n\n                            <TextInput \n                                style = { { textAlign: 'center' } }\n                                placeholder = \"Confirm Password\"\n                                secureTextEntry = {true}\n                                onChangeText = { formikProps.handleChange('confirm') }\n                                value = { formikProps.values.confirm }\n                            />\n                            <Text style = { myStyles.formError }> {  formikProps.touched.confirm && formikProps.errors.confirm } </Text>\n\n                            <Button title = \"Continue\" onPress = { formikProps.handleSubmit } />\n                        </View>\n                    );\n                }\n            }\n        </Formik>\n    );\n}\n\nconst myStyles = StyleSheet.create({\n    form: {\n        textAlign: 'center', \n    },\n    inputField: {\n        textAlign: 'center'\n    },\n    formError: {\n        color: 'red', \n        fontSize: 12,\n        textAlign: 'center'\n    }\n});\n\nexport default SignUpForm"]},"metadata":{},"sourceType":"module"}